모델이란 복답한 대상의 핵심 특징만 선별하여 일정한 관점으로 단순화한 뒤 기호나 그림 등을 사용하여 체계적으로 표현한 것으로 실제 모습을 미리 확인하기 위해 필요하다.

소프트웨어 개발 모델은 객체지향 개발에서는 UML의 다양한 다이어그램을 통해 개발 소프트웨어의 범위나 구조와 기능을 이해할 수 있다.
장점
1. 이해도 향상 : 실제 개발 범위에 해당하는 내용을 단순화해야 하므로 개발 영역을 정확히 더 이해할 수 있다.
                 프로그램 전체 모습을 시각적으로 나타낼 수 있어 사용자는 관련 요소들의 상호 관계를 빠르게 파악할 수 있다.
                 이해 당사자 간의 의사소통 도구로 활용할 수 있다.
2. 유지보수 용이 : 요구사항 변경에 따른 유지보수에 활용할 수 있다.
                   유사한 시스템을 개발할 때도 활용하여 개발 기간과 비용을 줄여준다.
단점
1. 과도한 문서 작업으로 일정 지연 : 단계마다 각종 다이어그램을 포함한 문서 작성에 많은 시간을 할애하면 실제 개발 업무가 지연된다.
2. 형식적인 산출물로 전락할 가능성 : 수많은 문서가 형식적으로만 만들어져 활용되지 못할 수 있다.
                                    변경된 내용을 산출물에 즉시 반영하지 않으면 문서 자체가 사장될 가능성이 높다.

모델링이란 모델을 제작하는 과정으로 기호나 다이어그램, 표기법 등을 사용하여 일관성 있는 해석이 가능하도록 표현한다.
표현 방법
1. 자연어를 사용한 표현 : 사용자 요구사항을 자연어로 표현하는 것으로 도구나 기술을 따로 익힐 필요가 없고 사용자와 대화할 때도 이해하기 쉽지만 
                          표현이 길어지고 해석이 달라질 수 있으며 표현된 내용을 검증하기 어렵다.
2. 형식 언어를 사용한 표현 : 문법과 의미가 수학을 기초로 작성되어 간결하고 정확하게 표현할 수 있지만 표기법을 별도로 공부해야한다.
3. UML 다이어그램을 사용한 표현 : UML 다이어그램을 사용하면 개발할 소프트웨어를 가시적으로 볼 수 있고, 개발할 소프트웨어에 대한 문서화도 가능하다.

개발 방법에 따른 모델링 언어
1. 구조적 방법
자료 흐름도(DFD), 자료 사전(DD), 소단위명세서
2. 정보공학 방법
E-R 다이어그램
3. 객체지향 방법
유스케이스 다이어그램

요구사항의 문서화
소프트웨어 요구분석명세서란 요구분석 과정의 최정 산출물로 사용자와 개발자를 연결하는 중요한 문서로 설계와 구현에서 참조할 사항, 전반적으로 알아야 할 사항을 포함하는 문서이다.

작성 시 주의사항
1. 사용자가 쉽게 읽고 이해할 수 있도록 작성한다.
2. 개발자가 설계와 코딩에 효과적으로 사용할 수 있도록 작성한다.
3. 비기능 요구를 명확히 작성한다.
4. 테스트 기준으로 사용할 수 있도록 정량적으로 작성한다.
5. 품질에 대해 우선순위를 명시해야한다.
