디자인 패턴이란 많은 개발자들이 경험상 얻은 설계 지식을 검증하고 추상화하여 일반화한 템플릿이다.

장점
1. 개발자 간 원활하게 의사소통할 수 있다.
2. 소프트웨어 구조 파악이 용이하다.
3. 재사용을 통한 개발 시간이 단축된다.
4. 설계 변경 요청에 대한 대처가 유연하다.

단점
1. 객체지향 설계/구현 위주이다.
2. 초기 투자 비용이 부담된다.

GoF의 디자인 패턴은 소프트웨어 설계를 위한 지식이나 노하우를 공유할 방법 중 하나이다.
설계 중 재샤용할 경우에 유용한 것을 디자인 패턴으로 정립하고 소프트웨어 설계에 대한 지식이나 노하우가 문제 유형별로 잘 구체화되어 있다.
동일한 유형의 문제를 해결하는 방법에 대한 지식이나 노하우가 패턴 형태로 충분히 일반화할 수 있다.

디자인 패턴의 종류는 27개로 기본 패턴 4개, 생성 패턴 5개, 구조 패턴 7개, 행위 패턴 11개가 있다.

기본 패턴은 객체지향 프로그램에서 흔히 쓰이는 기본적인 패턴으로 개념 실체 패턴, 플레이어 역할 패턴, 위임 패턴, 계층 구조 패턴이 있다.
생성 패턴은 객체의 생성과 참조 과정을 추상화하여 특정 객체의 생성 과정을 분리하는 패턴으로 팩토리 패턴, 싱글턴 패턴, 프로토타입 패턴, 빌더 패턴, 추상 팩토리 패턴이 있다.
구조 패턴은 클래스나 객체의 구성으로 더 큰 구조를 만들어야 할 때 유용한 디자인 패턴으로 데코레이터, 어댑터, 컴포지트, 브리지, 퍼사드, 플라이웨이트, 프록시 패턴이 있다.
