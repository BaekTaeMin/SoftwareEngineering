주먹구구식 모델은 즉흥적인 소프트웨어 개발 모델로 공식적인 가이드라인이나 프로세스가 없는 개발 방식이다.
코드를 작성해 제품을 만든 후 요구분석, 설계, 유지보수에 대해 생각한다.

단점
1. 정해진 개발 순서나 단계별 문서화된 산출물이 없어 관리 및 유지보수가 매우 어렵다.
2. 프로젝트 전체 범위를 알 수 없고 좋은 아키텍처를 만들 수도 없다.
3. 효과적으로 일을 나눌 수가 없다.
4. 프로젝트 진행 상황을 파악하기 어렵다.
5. 코딩을 먼저 하므로 계속 수정할 가능성이 높은데 수정을 거치면서 프로그램 구조가 나빠져 수정이 어려워진다.

선형 순차적 모델은 다음 단계로 넘어가는 모델로 전통적인 모델이다.
계획, 분석, 설계, 구현, 테스트, 유지보수의 각 단계가 하향식으로 진행된다.
각 단계가 끝날 때마다 결과를 확인한 후 다음 단계로 나아간다.
요구분석명세서를 작성하고 명세서를 기준으로 사용자에게 이상 유무를 확인받고 설계 절차로 넘어간다.

장점
1. 관리가 용이하다.
2. 체계적으로 문서화할 수 있다.
3. 요구사항의 변화가 적은 프로젝트에 적합하다.
단점
1. 각 단계의 결과물이 완벽한 수준이 되어야 다음 단게에 오류가 넘어가지 않는다.
2. 각 단계는 앞 단계가 완료되어야 다음 단계를 수행할 수 있다.
3. 사용자가 중간에 가시적인 결과를 볼 수 없다.

V 모델은 선형 순차적 모델의 변형으로 테스트 단계를 추가하여 분석 및 설계가 어떻게 관련되어 있는지 나타낸다.
각 개발 단계를 검증하는데 집중하여 오류를 줄일 수 있다.

진화적 프로세스 모델
프로토타입 모델이란 완전한 소프트웨어를 만들기 전에 사용자의 요구대로 모형을 만들고 사용자와 의사소통하는 도구로 활용하는 것이다.
개발자는 초기 요구사항을 반영해 1차 프로토타입(입출력화면)을 만들고 사용자에게 보여줘 추가 요구나 수정 요구를 하고 개발자는 이를 바탕으로 2차 프로토타입을 제작한다.

장점
1. 개발자와 사용자가 구체적이고 원활하게 대화할 수 있다.
2. 사용자의 요구가 충분히 반영된 요구분석명세서를 작성할 수 있다.
3. 사용자의 요구가 반영된 최종 제품이 나오므로 유지보수에 필요한 노력과 시간을 줄일 수 있다.
단점
1. 반복적인 개발 단계로 투입인력과 비용산정이 어렵다.
2. 중간 정검을 할 수 있는 산출물을 생성할 수 없어 프로토타이핑 과정을 관리하기 어렵다.
3. 개발 범위가 명확하지 않아 개발의 목표나 종료 시점이 불명확해질 수 있다.

나선형 모델은 초기 요구분석 후 프로토타입 개발 이전에 위험 분석 단계를 거친다.

장점
1. 위험을 의식하고 개발하기 때문에 프로젝트가 중단되는 일이 일어날 확률이 적다.
2. 반복적인 개발 방식으로 인해 사용자의 요구가 반영되어 불만이 적다.
단점
1. 개발 절차가 반복적으로 계속 진행되기 때문에 프로젝트 기간이 길어질 수 있다.
2. 반복횟수가 많아질수록 프로젝트 관리가 어렵다.

단계적 개발 모델은 개발과 사용을 병행하는 과정을 반복해 진행하면서 완료한다.
릴리스를 구성하는 방법에 따라 점증적 개발 방법과 반복적 개발 방법으로 나뉜다.

점증적 개발 방법은 요구분석명세서에 명시된 시스템 전체를 기능에 따라 독립성 높은 서브 시스템으로 분할한다.
장점
1. 소프트웨어를 단계적으로 도입하면 조직에 자연스럽게 변화를 줄 수 있다.
2. 이미 사용하고 있는 서브시스템이 있어 어떤 유형으로 개발해야 하는지 잘 알 수 있다.
단점
1. 이미 개발된 서브시스템들과 통합하는 데 어려움을 겪을 수 있다.

반복적 개발 방법은 초기의 요구사항이 불분명한 경우에 적합하다.

통합 프로세스 모델은 반복적 생명주기를 기반으로 하는 프로세스 모델 중 가장 많이 사용되는 모델이다.

애자일 프로세스 모델이란 고객의 요구에 민첩하게 대응하고 그때그때 주어지는 문제를 풀어나가는 방법으로
개개인과의 상호 소통을 중시하고 환경과 고객의 변화에 능동적으로 대처하는 것을 강조한다.

스크럼 방식이란 소프트웨어 개발보다는 팀의 개선과 프로젝트 관리에 중점을 둔 애자일 방법론으로 경험적 관리 기법 중 하나이고 구체적인 프로세스를 명확하게 제시하지 않는다.
