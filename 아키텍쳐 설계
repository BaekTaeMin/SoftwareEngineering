아키텍처란 뼈대와 특성을 결정짓는 기본 구조를 일컫는 말

필요성
1. 복잡하고 규모가 큰 소프트웨어를 개발하려면 전체적인 구조가 유기적으로 잘 구성되어야 한다.
2. 잘 저으이된 구조의 품질 좋은 소프트웨어를 만들려면 소프트웨어 아키텍처가 필요하다
3. 소프트웨어가 어떤 구조이고 어떻게 동작할 것인지를 예측할 수 있으며, 변겨엥 유연하게 대처 가능하다.

특징
1. 소프트웨어의 골격을 나타내는 추상화된 전체 구조를 제공한다.
2. 소프트웨어를 이루고 있는 여러 구성요소를 다룬다.
3. 인터페이스를 통해 소프트웨어 구성요소가 어떻게 상호작용하는지를 정의한다.
4. 세부 내용보다는 중요 내용만 다룬다.

설계 시 고려사항
1. 이해관계자 사이의 의사소통 도구로 활용할 수 있어야 한다.
2. 구현에 대한 제약 사항을 정의해야 한다.
3. 모든 이해관계자의 품질 요구사항을 반영해 우선순위에 따라 시스템 품질 속성을 결정해야 한다.

기대효과
1. 개발에 참여하는 사람들의 이해의 폭이 넓어지며 구현상의 문제점을 도출할 수 있다.
2. 구조화를 위한 구체적인 방안을 생각할 수 있다.
3. 설계를 재사용할 수 있다.


품질 속성
반영하는 방법
1. 해당 프로젝트에서 중요하게 생각하는 품질 속성을 결정
2. 결정한 품질 속성을 어느정도 수준으로 설계할 것인지를 목표를 설정

시스템 품질 속성
가용성이란 시스템 실패 없이 시스템이 운용될 수 있는 확률로 시스템이 장애 발생 없이 서비스를 제공할 수 있는 능력이다.
변경 용이성이란 사용자가 새로운 요구사항을 요청했을 때 얼마나 쉽게 변경할 수 있는지를 말한다.
성능이란 사용자 요청과 같은 이벤트가 발생했을 때 얼마나 빠르고 효율적으로 기능을 수행할 수 있는가를 말한다.
보안성이란 허용되지 않은 접근에 대응할 수 있는 능력이다.
사용성이란 시스템을 사용할 때 발생할 수 있는 여러가지 상황을 극복할 수 있도록 이를 반영해 아키텍처 설계 작업을 해야 한다.
테스트 용이성이란 테스트 비용을 줄이기 위해서는 아키텍처 설계부터 테스트를 고려해야 한다.

아키텍처 품질 속성
개념적 무결성이란 전체 시스템과 시스템 구성 요소가 일관되도록 아키텍처를 결정해야 한다.
정확성과 완전성이란 사용자가 요구하는 기능을 충족시키는 정도를 말한다.
개발 용이성이란 전체 시스템을 적절한 모듈로 분할한 후 분배해 개발함으로써 정해진 기간 내 개발을 완성하고 개발 과정 중에도 변경할 수 있는 능력이다.
